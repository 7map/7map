@startuml diagram

class App implements Runnable {
    - SIZE
    - main : Thread
}

interface Runnable {

}

package com.sevenmap.exceptions {
    class ExitOverrideException {

    }
    class InitError {

    }
}
package com.sevenmap.ui {
    
    class Engine implements Runnable {
        + engine()
        + start(target : Runnable)
    }
    
    class Window {
        - size : int[2]
        - title : String
        - windowElement : long
        - posX : int[1]
        - posY : int[1]
        + **Window(width : int, height : int, title : String)**
        + getInput() : Input
        + getBgColor() : Vector3f
        + setBgColor(r : float, g : float, b : float) : void
        + **create()** : void
        + **update()** : void
        + **swap()** : void
        + souldClose() : boolean
        - createCallBacks() : void




    }

    enum eventType {
        KEY
        BUTTON
        NONE
    }

    class Input {
        - keyCB : GLFWKeyCallback
        - cursorPosCB : GLFWCursorPosCallback
        - mouseClickCB : GLFWMouseButtonCallback
        - mouseScrollCB : GLFWScrollCallback
        - keyStates : boolean[]
        - mouseBStates : boolean[]
        - mousePos : double[]
        - scrollOffset : double[]
        + **Input()**
        + getMouseX() : double
        + getMouseY() : double
        + getScrollX() : double
        + getScrollY() : double
        + getMousePos() : double[]
        + getKeyCB() : GLFWKeyCallback
        + getCursorPosCB() : GLFWCursorPosCallback
        + getMouseClickCB() : GLFWMouseButtonCallback
        + getMouseScrollCB() : GLFWScrollCallback
        + destroy() : void
        + isKeyDown(key : int) : boolean
        + isButtonDown(button : int) : boolean
        + isDown(event : eventType, key : int) : boolean

        
    }

    class TaskMgr {
        - tasks : Map<>
        - inputStream : Input
        + create(inputStream : Input) : void
        + update() : void
        + add(event : eventType, key : int, action : Runnable) : Task
        - runTasks() : void
    }

    class Task implements Runnable {
        - action : Runnable
        - {static} lastId : int
        - id : int
        - parent : List<Task>
        + **Task(action : Runnable, List<Task> parent)**
        + run() : void
        + remove() : void
    }

    abstract class FrameObject {
        + create() : void
        + update() : void
        + destroy() : void

    }

    package com.sevenmap.ui.gfx {

        class Renderer {
            - shader : Shader
            - window : Window
            + **Renderer(window : Window, shader : Shader)**
            + render() : void
        }

        class Mesh {
            - indices : int[]
            - vertices : Vertex[]
            - vao : int
            - pbo : int
            - ibo : int
            + **Mesh(vertices : Vertex[], indices : int[])**
            + **Mesh(vertices : Vertex[], indices : int[], material : Material)**
            + getVAO() : int
            + getPBO() : int
            + getIBO() : int
            + getCBO() : int
            + getTBO() : int
            + getMaterial() : Material
            + getVertices() : Vertex[]
            + getIndices() : int[]
            + **build()** : void
        }

        class Vertex {
            - pos : Vector3f
            - color : Vector3f
            - textureCoord : Vector2f
            + **Vertex(position : Vector3f, color : Vector3f)**
            + **Vertex(position : Vector3f, color : Vector3f, textureCoord : Vector2f)**
            + getPos() : Vector3f
            + getColor() : Vector3f
            + getTexCoord() : Vector2f
        }

        class Material {
            - texID : int
            - path : String
            - width : int
            - height : int
            + **Material(path : string)**
            + getTexID() : int
            + **create()** : void
            + **destroy()** : void
        }

        class Shader {
            - vertexFile : String
            - fragmentFile : String
            - vertexShaderID : int
            - fragmentShaderID : int
            - programID : int
            + **Shader(vertexPath : String, fragmentPath : String)**
            + **create()** : void
            + bind() : void
            + unbind() : void
            + **destroy()** : void
        }
    }
    
    package com.sevenmap.ui.math {
        interface Vector {
            <V extends Vector<V>>
            + add(vec : V) : V
            + sub(vec : V) : V
            + dot(vec : V) : V
            + norm() : float
            + multiply(vec : V) : V
            + divide(vec : V) : V
            + normalize() : V
        }

        class Vector2f implements Vector {
            - x : float
            - y : float
            + **Vector2f(x : float, y : float)**
            + getX() : float
            + getY() : float
            + setX(x : float) : void
            + setY(y : float) : void
            + set(x : float, y : float)
            + set(vector : Vector2f)
        }
        class Vector3f implements Vector {
            - x : float
            - y : float
            - z : float
            + **Vector3f(x : float, y : float, z : float)**
            + getX() : float
            + getY() : float
            + getZ() : float
            + setX(x : float) : void
            + setY(y : float) : void
            + setZ(z : float) : void
            + set(x : float, y : float, z : float)
            + set(vector : Vector3f)
        }

        class Vector4f implements Vector {
            - x : float
            - y : float
            - z : float
            - w : float
            + **Vector4f(x : float, y : float, z : float, w : float)**
            + getX() : float
            + getY() : float
            + getZ() : float
            + getW() : float
            + setX(x : float) : void
            + setY(y : float) : void
            + setZ(z : float) : void
            + setW(w : float) : void
            + set(x : float, y : float, z : float, w : float)
        }

        
    }

    package com.sevenmap.ui.elements {
        
        class Item {
            # position : Vector3f
            # rotation : Vector3f
            # scale : Vector3f
            + **Item(position : Vector3f, rotation : Vector3f)**
            + **Item(position : Vector3f, rotation : Vector3f, scale : Vector3f, mesh : Mesh)**
            + getPos() : Vector3f
            + getRot() : Vector3f
            + getScale() : Vector3f
            + getMesh() : Mesh
            + setPos(x : float, y : float, z : float) : void
            + setRot(l : float, m : float, n : float) : void
            + setScale(sx : float, sy : float, sz : float) : void
            + destroy() : void


        }

        class Camera extends Item{
            + **Camera(position : Vector3f, rotation : Vector3f)**
        }

        
    }

    package com.sevenmap.ui.utils {
        class Color {
            - r : int
            - g : int
            - b : int
            + **Color(r : int, g : int)**
            + **Color(r : double, g : double, b : double)**
            + **Color(str : String)**
            + toVector3f() : Vector3f
            + {static} fromHsl(h : int, s : int, l : int) : Color
            + toString() : String
            - affectRgbFloat(r : double, g : double, b : double) : void
            - affectHsl(hi : int, si : int, li : int) : void
            - affectRGB(r : int, g : int, b : int) : void
            - parseHex(str : String, start : int) : int
            - hue2rgb(p : double, q : double, t : double) : double
        }
        note right: pull request <u>#26</u> by @seba1204

        class FileUtils {
            + {static} loadFile(path : String) : String
            + {static} loadImage(path : String) : BufferedImage
        }
    }


}

Window --* App
Renderer --* App
TaskMgr --* Window
Input --* Window
Vertex --o Mesh
Task --* TaskMgr
TaskMgr --|> FrameObject
Window --|> FrameObject
Window -- InitError
Input -- eventType
TaskMgr -- eventType
Input --* TaskMgr
App -- ExitOverrideException
Vector3f --|> Vertex
Renderer *-- Shader
Material --* Mesh
Mesh --o Item

@enduml